#!/usr/bin/env python
import json
import getpass
import os
import textwrap

import click
import requests
import yamlreader

from cbas.password_providers import get_password, DEFAULT_PASSWORD_PROVIDER
from cbas.auth import obtain_access_token
from cbas import messages


DEFAULT_CONFIG_PATH = "~/.cbas"


def get_username(args):
    return args['username'] if args['username'] else getpass.getuser()


def get_sshkey(ssh_key_path):
    ssh_key_path = (ssh_key_path
                    if ssh_key_path
                    else os.path.expanduser('~/.ssh/id_rsa.pub'))
    with open(ssh_key_path, "r") as ssh_key_filehandle:
        return ssh_key_filehandle.read()


class CBASConfig(object):

    def __init__(self,
                 username=None,
                 auth_url=None,
                 client_secret=None,
                 password_provider=DEFAULT_PASSWORD_PROVIDER,
                 jump_host=None,
                 ):
        self.username = getpass.getuser()
        self.auth_url = auth_url
        self.client_secret = client_secret
        self.password_provider = password_provider
        self.jump_host = jump_host

    def __str__(self):
        return textwrap.dedent("""
             {{'username': '{username}',
               'auth_url': '{auth_url}',
               'client_secret': '{client_secret}',
               'password_provider': '{password_provider}',
               'jump_host': '{jump_host}',
             }}""").strip().replace('\n', '').format(
                 username=self.username,
                 auth_url=self.auth_url,
                 client_secret=self.client_secret,
                 password_provider=self.password_provider,
                 jump_host=self.jump_host,
                 )

    @staticmethod
    def read(ctx, param, value):
        config = ctx.ensure_object(CBASConfig)
        config_path = os.path.expanduser(value)
        if os.path.exists(config_path):
            loaded_config = yamlreader.yaml_load(config_path)
            if 'username' in loaded_config:
                config.username = loaded_config['username']
            if 'auth-url' in loaded_config:
                config.auth_url = loaded_config['auth-url']
            if 'client-secret' in loaded_config:
                config.client_secret = loaded_config['client-secret']
            if 'password-provider' in loaded_config:
                config.password_provider = loaded_config['password-provider']
            if 'jump-host' in loaded_config:
                config.jump_host = loaded_config['jump-host']
        return config


pass_config = click.make_pass_decorator(CBASConfig, ensure=True)


@click.group()
@click.option('-d', '--debug', default=False, is_flag=True)
@click.option('-c', '--config',
              type=click.Path(exists=False, file_okay=True, dir_okay=True),
              callback=CBASConfig.read,
              help='The config file/directory to use instead of the default.',
              default=DEFAULT_CONFIG_PATH,
              )
@click.option('--username')
@click.option('--auth-url')
@click.option('--client-secret')
@click.option('--password-provider')
@click.option('--jump-host')
def main(debug,
         config,
         username,
         auth_url,
         client_secret,
         password_provider,
         jump_host):
    if debug:
        messages.DEBUG = True
    if username:
        config.username = username
    if auth_url:
        config.auth_url = auth_url
    if client_secret:
        config.client_secret = client_secret
    if password_provider:
        config.password_provider = password_provider
    if jump_host:
        config.jump_host = jump_host


@main.command()
@pass_config
@click.option('--sshkey')
def upload(config, sshkey):
    ssh_key = get_sshkey(sshkey)
    password = get_password(config.password_provider, config.username)

    access_token = obtain_access_token(
        config.auth_url, config.client_secret, config.username, password)

    jump_request_header = {'Authorization': 'Bearer ' + access_token,
                           'Content-Type': 'application/json',
                           'Cache-Control': 'no-cache'}
    jump_request_data = json.dumps({"pubkey": ssh_key})
    jump_url = 'https://' + config.jump_host + '/create'

    jump_response = requests.post(jump_url,
                                  jump_request_data,
                                  headers=jump_request_header)
    jump_response.raise_for_status()


@main.command()
@click.option('--username')
@click.option('--auth-url')
@click.option('--client-secret')
@click.option('--password-provider')
def delete(**kwargs):

    client_secret = kwargs['client_secret']
    auth_url = kwargs['auth_url']

    username = get_username(kwargs)
    password_provider = kwargs.get('password_provider') or 'prompt'
    password = get_password(password_provider, username)

    access_token = obtain_access_token(
        auth_url, client_secret, username, password)

    jump_request_header = {'Authorization': 'Bearer ' + access_token,
                           'Content-Type': 'application/json',
                           'Cache-Control': 'no-cache'}
    jump_url = 'https://' + config.jump_host + '/delete'

    jump_response = requests.post(jump_url, headers=jump_request_header)
    jump_response.raise_for_status()

if __name__ == '__main__':
    main()
