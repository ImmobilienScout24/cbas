#!/usr/bin/env python
import json
import getpass
import os

import click
import requests
import yamlreader

from cbas.password_providers import get_password, DEFAULT_PASSWORD_PROVIDER
from cbas.auth import obtain_access_token
from cbas import messages


DEFAULT_CONFIG_PATH = "~/.cbas"


def get_username(args):
    return args['username'] if args['username'] else getpass.getuser()


def get_sshkey(args):
    ssh_key_path = (args['sshkey']
                    if args['sshkey']
                    else os.path.expanduser('~/.ssh/id_rsa.pub'))
    with open(ssh_key_path, "r") as ssh_key_filehandle:
        return ssh_key_filehandle.read()


class CBASConfig(object):

    def __init__(self,
                 username=None,
                 auth_url=None,
                 client_secret=None,
                 password_provider=DEFAULT_PASSWORD_PROVIDER
                 ):
        self.username = getpass.getuser()

    def __str__(self):
        return """username={username},""".format(username=self.username)

    @staticmethod
    def read(ctx, param, value):
        config = CBASConfig()
        config_path = os.path.expanduser(value)
        if os.path.exists(config_path):
            loaded_config = yamlreader.yaml_load(config_path)
            if 'username' in loaded_config:
                config.username = loaded_config['username']
            if 'auth-url' in loaded_config:
                config.auth_url = loaded_config['auth-url']
            if 'client-secret' in loaded_config:
                config.client_secret = loaded_config['client-secret']
            if 'password-provider' in loaded_config:
                config.password_provider = loaded_config['password-provider']
        return config


pass_config = click.make_pass_decorator(CBASConfig, ensure=True)


@click.group()
@click.option('-d', '--debug', default=False, is_flag=True)
@click.option('-c', '--config',
              type=click.Path(exists=False, file_okay=True, dir_okay=True),
              callback=CBASConfig.read,
              help='The config file/directory to use instead of the default.',
              default=DEFAULT_CONFIG_PATH,
              )
def main(debug, config):
    if debug:
        messages.DEBUG = True


@main.command()
@pass_config
@click.option('--username')
@click.option('--auth-url')
@click.option('--client-secret')
@click.option('--password-provider')
@click.option('--sshkey')
@click.argument('jumphost')
def upload(config, **kwargs):
    print config
    print(kwargs)
    client_secret = kwargs['client_secret']
    auth_url = kwargs['auth_url']

    username = get_username(kwargs)
    ssh_key = get_sshkey(kwargs)
    password_provider = kwargs['password_provider'] or 'prompt'
    password = get_password(password_provider, username)

    access_token = obtain_access_token(
        auth_url, client_secret, username, password)

    jump_request_header = {'Authorization': 'Bearer ' + access_token,
                           'Content-Type': 'application/json',
                           'Cache-Control': 'no-cache'}
    jump_request_data = json.dumps({"pubkey": ssh_key})
    jump_url = 'https://' + kwargs['jumphost'] + '/create'
    print(jump_url)

    jump_response = requests.post(jump_url,
                                  jump_request_data,
                                  headers=jump_request_header)
    jump_response.raise_for_status()
    print(jump_response.text)


@main.command()
@click.option('--username')
@click.option('--auth-url')
@click.option('--client-secret')
@click.option('--password-provider')
@click.argument('jumphost')
def delete(**kwargs):

    client_secret = kwargs['client_secret']
    auth_url = kwargs['auth_url']

    username = get_username(kwargs)
    password_provider = kwargs.get('password_provider') or 'prompt'
    password = get_password(password_provider, username)

    access_token = obtain_access_token(
        auth_url, client_secret, username, password)

    jump_request_header = {'Authorization': 'Bearer ' + access_token,
                           'Content-Type': 'application/json',
                           'Cache-Control': 'no-cache'}
    jump_url = 'https://' + kwargs['jumphost'] + '/delete'

    jump_response = requests.post(jump_url, headers=jump_request_header)
    jump_response.raise_for_status()

if __name__ == '__main__':
    main()
