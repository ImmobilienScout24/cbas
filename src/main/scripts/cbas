#!/usr/bin/env python
import json
import getpass
import os

import click
import requests

from cbas.password_providers import get_password


def obtain_access_token(auth_url, client_secret, username, password):
    auth_request_data = {'client_id': 'jumpauth',
                         'client_secret': client_secret,
                         'username': username,
                         'password': password,
                         'grant_type': 'password'}
    auth_response = requests.post(auth_url, auth_request_data)
    auth_response.raise_for_status()
    access_token = auth_response.json()['access_token']
    click.echo("Access token: '{0}'".format(access_token))
    return access_token


def get_username(args):
    return args['username'] if args['username'] else getpass.getuser()


@click.group()
def main(**kwargs):
    pass


@main.command()
@click.option('--auth-url')
@click.option('--username')
@click.option('--sshkey')
@click.option('--password', prompt=True, hide_input=True)
@click.argument('jumphost')
def upload(**kwargs):
    if not kwargs['sshkey']:
        ssh_key_path = os.environ['HOME'] + '/.ssh/id_rsa.pub'
    else:
        ssh_key_path = kwargs['sshkey']

    ssh_key_filehandle = open(ssh_key_path, "r")
    ssh_key = ssh_key_filehandle.readline()
    ssh_key_filehandle.close()


    print(username)
    print(ssh_key)
    username = get_username(kwargs)
    auth_url = kwargs['auth-url']
    password = kwargs['kwargs']
    access_token = obtain_access_token(auth_url, username, password)

    jump_request_header = {'Authorization': 'Bearer ' + access_token,
                           'Content-Type': 'application/json',
                           'Cache-Control': 'no-cache'}
    jump_request_data = json.dumps({"pubkey": ssh_key})
    jump_url = 'https://' + kwargs['jumphost'] + '/create'
    print(jump_url)

    jump_response = requests.post(jump_url,
                                  jump_request_data,
                                  headers=jump_request_header)
    jump_response.raise_for_status()
    print(jump_response.text)


@main.command()
@click.option('--auth-url')
@click.option('--username')
@click.option('--client-secret')
@click.argument('jumphost')
@click.option('--password-provider')
def delete(**kwargs):

    client_secret = kwargs['client_secret']
    auth_url = kwargs['auth_url']

    username = get_username(kwargs)
    password_provider = kwargs.get('password_provider') or 'prompt'
    password = get_password(password_provider, username)

    access_token = obtain_access_token(
        auth_url, client_secret, username, password)

    jump_request_header = {'Authorization': 'Bearer ' + access_token,
                           'Content-Type': 'application/json',
                           'Cache-Control': 'no-cache'}
    jump_url = 'https://' + kwargs['jumphost'] + '/delete'

    jump_response = requests.post(jump_url, headers=jump_request_header)
    jump_response.raise_for_status()

if __name__ == '__main__':
    main()
